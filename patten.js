// 正则表达式
// 字面量方式
const reg = /\d/gi;
// 函数表达式
const reg1 = new RegExp('\d','gi')

// i 忽略大小写
// g 全局匹配，匹配到第一个之后依然会继续匹配，直至结束
// m 多行匹配，遇到换行依然会继续匹配，直至结束

// 正则表达式语法
// 1.字符集合与范围
// [abc] 匹配中括号内的字符 'acds' -> 'a'
'acds'.match(/[abc]/g)
// [^abc] ^取反，不在括号里的字符 abcd -> d
'acds'.match(/[^abc]/g)
// [0-9] 匹配0-9的任意数字
'114aw'.match(/[0-9]/g)
// [a-z] 匹配任何小写的从a-z的英文
'114aw'.match(/[a-z]/g)
// [A-Z] 匹配任何小写的从A-Z的英文
'114aw'.match(/[A-Z]/g)

// 2.预定义元字符类
// . 匹配任意单个字符，除换行和结束符
// \d 匹配任意0-9数字 [0-9]
// \D 匹配任意非数 [^0-9]
// \s 	匹配空白字符 主要有(\n、\f、\r、\t、\v)
// \S 	匹配非空白字符
// \w 匹配任意单词字符（数字、字母、下划线），等价于[A-Za-z0-9_]
// \W 匹配任意非单词字符（数字、字母、下划线），等价于[^A-Za-z0-9_]

// 3.边界类
// ^ 匹配以字符串开始 /^a/匹配"an A"，而不匹配"An a"
// $ 匹配字符串的结束 /a$/匹配"An a"，而不匹配"an A"
// \b 匹配单词的开始或结束 /\bno/ 匹配 "at noon" 中的 "no"

// 4.量词类
// * 重复零次或者更多次
// + 重复一次或者更多次（至少有一次）
// ? 重复零次或一次（可有可无）
// {n} // 重复n次
// {n，m} // 重复至少 n 次最多 m 次
// {n,} 至少 n 次
